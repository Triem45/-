# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWnd.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
file_path = r'C:\Users\27879\Desktop\SVRemmendation\Data.csv'
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSignal
from PyQt5.QtWidgets import QDialog
from UserLoginWnd import Ui_UserLoginWnd
from VideoLoginWnd import Ui_VideoLoginWnd
from AnalysisWnd import Ui_AnalysisWnd
import AutoWnd
import sys
sys.path.append(r'C:\Users\27879\Desktop\SVRemmendation')
from IO import SaveToFile
from GlobalVariable import global_obj
def ConvertListToStr(ul: list,id,catelist:list):
    result = str('')
    for item in ul:
        try:
         score=global_obj.user_video_score[id][item]
         cate = catelist[item]
         result += str(cate) + ',' + str(item) + ',' + str(score) + ';'
        except: continue
    result = result[:-1]
    return result
def SaveUserToFile():
    df = pd.DataFrame(columns=[ 'UID', 'work_phase', 'gender', 'job', 'video_list'])
    catelist = {}
    for video in global_obj.GlobalVideoList:
        catelist[video.uid] = video.category
    for i, user in enumerate(global_obj.GlobalUserList):
        
        video_list=[sublist[0] for sublist in user.video_list[0]]
        #print(video_list)
        df.loc[i + 2] = [user.uid,user.work_phase,user.gender,user.job, ConvertListToStr(video_list,user.uid,catelist)]
    print("Saving")
    df.to_csv(file_path + '1.bak', encoding='utf-8', index=False)
class Ui_MainWnd(QObject):
    simulation_started = pyqtSignal()  # 添加一个信号，用于通知模拟开始
    simulation_finished = pyqtSignal()  # 添加一个信号，用于通知模拟结束
   
    def setupUi(self, MainWnd):
        MainWnd.setObjectName("MainWnd")
        MainWnd.resize(370, 500)
        self.UL = QtWidgets.QPushButton(MainWnd)
        self.UL.setGeometry(QtCore.QRect(50, 30, 241, 81))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(22)
        self.UL.setFont(font)
        self.UL.setObjectName("UL")
        self.VL = QtWidgets.QPushButton(MainWnd)
        self.VL.setGeometry(QtCore.QRect(50, 130, 241, 91))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(22)
        self.VL.setFont(font)
        self.VL.setObjectName("VL")

        self.YL = QtWidgets.QPushButton(MainWnd)
        self.YL.setGeometry(QtCore.QRect(50, 240, 241, 81))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(22)
        self.YL.setFont(font)
        self.YL.setObjectName("YL")

        self.Analysis = QtWidgets.QPushButton(MainWnd)
        self.Analysis.setGeometry(QtCore.QRect(50, 340, 241, 91))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(22)
        self.Analysis.setFont(font)
        self.Analysis.setObjectName("Analysis")

                # 添加背景图片
        self.label_bg = QtWidgets.QLabel(MainWnd)
        self.label_bg.setGeometry(QtCore.QRect(0, 0, 380, 380))  # 背景图片大小改为380x380
        self.label_bg.setPixmap(QtGui.QPixmap(r'C:\Users\27879\Desktop\SVRemmendation\xiaohui.jpg'))
        opacity_effect = QtWidgets.QGraphicsOpacityEffect()
        opacity_effect.setOpacity(0.5)  # 设置透明度，值范围为0（完全透明）到1（完全不透明）
        
        # 应用 QGraphicsOpacityEffect 到背景图片的 QLabel
        self.label_bg.setGraphicsEffect(opacity_effect)
        
        self.label_bg.setAlignment(QtCore.Qt.AlignCenter)  # 设置对齐方式为居中
        self.label_bg.setObjectName("label_bg")

        # 将背景图片放置在窗口中心
        self.label_bg.move((MainWnd.width() - self.label_bg.width()) / 2, (MainWnd.height() - self.label_bg.height()) / 2)
        
        # 将背景图片置于底层
        self.label_bg.lower()
        self.retranslateUi(MainWnd)

        self.UL.clicked.connect(self.open_UserLoginWnd) # type: ignore
        self.VL.clicked.connect(self.open_VideoLoginWnd) # type: ignore
        self.YL.clicked.connect(self.auto_operate)
        self.Analysis.clicked.connect(self.open_AnalysisWnd) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWnd)

    def retranslateUi(self, MainWnd):
        _translate = QtCore.QCoreApplication.translate
        MainWnd.setWindowTitle(_translate("MainWnd", "数据结构大作业"))
        self.UL.setText(_translate("MainWnd", "用户登录"))
        self.VL.setText(_translate("MainWnd", "视频登录"))
        self.YL.setText(_translate("MainWnd", "一键生成"))
        self.Analysis.setText(_translate("MainWnd", "统计分析"))

    def open_UserLoginWnd(self):
        self.another_window = QtWidgets.QMainWindow()
        self.ui = Ui_UserLoginWnd()
        self.ui.setupUi(self.another_window)
        self.another_window.show()
    def open_VideoLoginWnd(self):
        self.another_window = QtWidgets.QMainWindow()
        self.ui = Ui_VideoLoginWnd()
        self.ui.setupUi(self.another_window)
        self.another_window.show()

    def auto_operate(self):
        self.simulation_manager = AutoWnd.AutoSimulationManager()
        self.simulation_started.emit()  # 发送信号，告知模拟开始
        self.simulation_manager.start_auto_simulation()
        self.simulation_finished.emit()  # 发送信号，告知模拟结束
        SaveUserToFile()
    def open_AnalysisWnd(self):
        self.another_window = QtWidgets.QMainWindow()
        self.ui = Ui_AnalysisWnd()
        self.ui.setupUi(self.another_window)
        self.another_window.show()
    